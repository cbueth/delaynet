(network_reconstruction)=
# Network Reconstruction

```{warning}
The Network Reconstruction functionality is currently a work in progress. This section will be expanded in future versions of `delaynet`.
```

Network reconstruction is the process of inferring the structure of a network from time series data. This is a crucial step in understanding the relationships between different nodes in a complex system.
Put simple, network reconstruction applies the connectivity measures to each pair of time series.
This results in a $(n \times n)$ matrix of $p$-values, and lags.

## Future Functionality

The Network Reconstruction module will include:

- Functions to construct weight matrices from time series data
- Methods to infer network topology from connectivity measures

Maybe:

- Algorithms for reconstructing directed and undirected networks
- Tools for visualizing reconstructed networks
- Techniques for handling noisy and incomplete data
- Include the parameters for the normalization step before (I'd say no to keep it simple)

## Planned Implementation

The planned implementation will include a function to generate a weight matrix by applying connectivity measures to pairs of time series.
As described in the {ref}`connectivity_measure` section, connectivity measures return $p$-values that indicate the strength of connections between time series.
Therefore, the weight matrix in network reconstruction represents a matrix of $p$-values, where lower values indicate stronger connections:

```python
# Pseudocode for future implementation
def reconstruct_network(time_series, connectivity_measure, **kwargs):
    """
    Reconstruct a network from time series data.

    Parameters:
    -----------
    time_series : numpy.ndarray
        Array of time series data, shape (n_nodes, n_timepoints)
    connectivity_measure : str or callable
        Connectivity measure to use for network reconstruction
    **kwargs : dict
        Additional arguments for the connectivity measure

    Returns:
    --------
    weight_matrix : numpy.ndarray
        Reconstructed weight matrix of :math:`p`-values, shape (n_nodes, n_nodes).
        Each element represents the :math:`p`-value of the connectivity between nodes.
        Lower :math:`p`-values indicate stronger connections.
    lag_matrix : numpy.ndarray
        Matrix of time lags, shape (n_nodes, n_nodes)
    """
    n_nodes = time_series.shape[0]
    weight_matrix = np.zeros((n_nodes, n_nodes))
    lag_matrix = np.zeros((n_nodes, n_nodes))

    for i in range(n_nodes):
        for j in range(n_nodes):
            if i != j:
                weight, lag = connectivity(time_series[i], time_series[j], 
                                          metric=connectivity_measure, **kwargs)
                weight_matrix[i, j] = weight
                lag_matrix[i, j] = lag

    return weight_matrix, lag_matrix
```
