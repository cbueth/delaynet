[build-system]
requires = ["setuptools>=61.2"]
build-backend = "setuptools.build_meta"

[project]
name = "delaynet"
authors = [{ name = "Carlson Büth" }, { name = "Massimiliano Zanin" }]
maintainers = [{ name = "Carlson Büth" }]
description = "Delay Propagation in Transportation Networks"
keywords = ["delay propagation", "transportation networks", "traffic flow", "traffic assignment", "traffic simulation"]
license = { text = "BSD-3-Clause" }
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python :: 3.11",
    "Operating System :: OS Independent",
    "Natural Language :: English",
    "Private :: Do Not Upload", # Remove this line to upload to PyPI
]
dynamic = ["readme", "version"]
requires-python = "~=3.11"
dependencies = [
    "numpy",
    "scipy",
    "statsmodels",
    "scikit-learn",
    "numba",
    "mkl",
]

[project.urls]
Documentation = "https://cbueth.de/delaynet"
Repository = "https://github.com/cbueth/delaynet"
Issues = "https://github.com/cbueth/delaynet/issues"
Changelog = "https://cbueth.de/delaynet/changelog"

[project.optional-dependencies]
dev = ["black", "isort", "pylint"]
test = ["pytest", "pytest-cov", "coverage"]

[tool.setuptools.packages.find]
exclude = [
    "examples*",
    "data*",
    "docs*",
    "tests*",
]
namespaces = false

[tool.setuptools.dynamic]
readme = { file = ["README.md", "LICENSE.txt"] }
version = { attr = "delaynet.__version__" }

# --------------------------------------------------------------------------------------
# Linting
# --------------------------------------------------------------------------------------b
[tool.pylint.main]
# Number of processes to use to do the linting.
jobs = 5
# Pickle collected data for later comparisons.
persistent = true
# When enabled, pylint would attempt to guess common misconfiguration and emit
# user-friendly hints instead of false-positive error messages.
suggestion-mode = true

[tool.pylint.basic]
# Regular expression matching correct module names. Overrides module-naming-
# style. Additionally to snake case allows for a prepended 'yyyymmdd-' string.
module-rgx = "(\\d{4}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])-)?(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$"
# Good variable names which should always be accepted, separated by a comma.
good-names = ["i", "j", "k", "_"]

[tool.pylint.format]
# Maximum number of characters on a single line.
max-line-length = 88

# --------------------------------------------------------------------------------------
# Testing
# --------------------------------------------------------------------------------------
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra"
testpaths = ["tests"]

[tool.coverage.run]
branch = true
source = ["delaynet"]
relative_files = true
