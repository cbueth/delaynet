---
file_format: mystnb
kernelspec:
  name: python3
---

(norm_methods)=
# Normalisation Methods

Time series normalisation is an essential preparatory step that helps to standardize data, remove trends, and make different time series comparable.
`delaynet` provides several normalisation methods that can be applied to time series data.
Depending on the {ref}`connectivity measure <connectivity_measure>` you might want to choose a specific normalisation.
First, the available methods are listed below with explanation and code examples.
The last paragraph presents the {ref}`convenience API <using_norm_methods>` for applying these methods.

## Available Methods

This sections presents the normalisation methods available in `delaynet`.

### Delta Normalisation

The delta normalisation method performs local mean subtraction. For each value in the time series, it subtracts the mean of a window of values centered around that point. (**CITE**)

```python
from delaynet.norms import delta

# Apply delta normalisation with a window size of 10
normalised_ts = delta(time_series, window_size=10)
```

Mathematically, the delta normalisation is defined as:

$$x_t' = x_t - \frac{1}{2w + 1} \sum_{k = t - w}^{t + w} x_k$$

where $x_t$ is the value at time $t$, $w$ is the window size, and $x_t'$ is the normalised value.

```{code-cell}
:tags: [hide-input]
import delaynet as dn
from numpy.random import default_rng
import matplotlib.pyplot as plt

# Generate fMRI data for a single node
fmri_data = dn.preparation.data_generator.gen_fmri(
    ts_len=1000,               # Length of time series
    downsampling_factor=2,     # Downsampling factor
    time_resolution=0.2,       # Time resolution
    coupling_strength=2.0,     # Coupling strength
    noise_initial_sd=1.0,      # Standard deviation of initial noise
    noise_final_sd=0.1,        # Standard deviation of final noise
    rng=default_rng(25968)     # Random number generator seed
)[:, 0]

# Plot the original fMRI data and the delta normalised fMRI data
plt.figure(figsize=(10, 4), dpi=300)
plt.plot(fmri_data, label='Original FMRI Data')
plt.title('Original and Delta Normalised FMRI Data')
plt.plot(dn.norms.delta(fmri_data, window_size=5), label=r'Delta Normalised $5$ Window')
plt.plot(dn.norms.delta(fmri_data, window_size=15), label=r'Delta Normalised $15$ Window')
plt.plot(dn.norms.delta(fmri_data, window_size=30), label=r'Delta Normalised $30$ Window')
plt.legend()
plt.grid()
plt.show()
```

### Second Difference Normalisation

The second difference normalisation calculates the difference of differences, which is a common method for detrending time series. This method is particularly useful for removing linear trends.

```python
from delaynet.norms import second_difference

# Apply second difference normalisation
normalised_ts = second_difference(time_series)
```

Note that the length of the time series is reduced by 2 after applying this normalisation.


```{code-cell}
:tags: [hide-input]
plt.figure(figsize=(10, 4), dpi=300)
plt.plot(fmri_data, label='Original FMRI Data')
plt.title('Original and Second Difference Normalised FMRI Data')
plt.plot(dn.norms.second_difference(fmri_data), label='Second Difference Normalised Data')
plt.legend()
plt.grid()
plt.show()
```


### Z-Score Normalisation

The Z-Score normalisation is a standard score that measures the number of standard deviations a data point is from the mean. It is calculated as:

$$Z = \frac{X - \mu}{\sigma}$$

where $X$ is the data point, $\mu$ is the mean, and $\sigma$ is the standard deviation.

```python
from delaynet.norms import z_score

# Apply Z-Score normalisation
normalised_ts = z_score(time_series)

# Apply Z-Score normalisation with periodicity
normalised_ts = z_score(time_series, periodicity=24, max_periods=7)
```

The Z-Score normalisation in `delaynet` can take into account the periodicity of the time series. This is useful for data with seasonal patterns, such as daily or weekly cycles. The `periodicity` parameter specifies the number of time steps in one period, and the `max_periods` parameter limits the number of periods to consider before and after the current value.

```{code-cell}
:tags: [hide-input]
plt.figure(figsize=(10, 5), dpi=300)
plt.plot(fmri_data, label='Original FMRI Data')
plt.title('Original and Z-Score Normalised FMRI Data')
plt.plot(dn.norms.z_score(fmri_data), label='Z-Score Normalised FMRI Data')
plt.plot(dn.norms.z_score(fmri_data, periodicity=24), label='Z-Score Normalised FMRI Data with Periodicity 24')
plt.plot(dn.norms.z_score(fmri_data, periodicity=60), label='Z-Score Normalised FMRI Data with Periodicity 50')
plt.legend()
plt.ylim(-5, 5)
plt.grid()
plt.show()
```

### Identity Normalisation

The identity "normalisation" simply returns the input time series without any modification. It should only be used for testing or if the data is already normalised.

```python
from delaynet.norms import identity

# Apply identity normalisation (no change)
normalised_ts = identity(time_series)
```

```{note}
Do we need to list this one here? Is it needed in the code?
```

(using_norm_methods)=
## Using Normalisation Methods

`delaynet` provides a consistent interface {py:func}`~delaynet.normalisation.normalise` for all normalisation methods.
You can refer to each method by its full name or by its shorthand:

- Delta normalisation: "delta" or "dt"
- Second difference normalisation: "second_difference", "second difference", or "2dt"
- Z-Score normalisation: "z_score", "z-score", "zs", or "zscore"
- Identity normalisation: "identity" or "id"

The full list can easily be pretty printed using {py:func}`dn.show_connectivity_metrics()<delaynet.connectivity.show_connectivity_metrics>`.

```python
from delaynet import normalise

# Normalise using the delta method
normalised_ts = normalise(time_series, method="delta", window_size=10)

# Normalise using the Z-Score method
normalised_ts = normalise(time_series, method="zs", periodicity=24)
```
